DirectX 12

DirectX12 == Direct3D12
Direct2D, DirectWrite를 포함하지 않음.

CPU -> Draw Call -> GPU 처리의 과정을 줄임.
완전한 비동기 렌더링, 각종 State들을 한번에 처리

텍스처 파일 로딩함수 -> DirectXTex


리소스 바인딩

리소스 배리어

Descriptor(서술자)
리소스의 정보를 기술한 메모리 블록
CBV, SRV, UAV를 생성하면 그 결과로 이 Descriptor를 얻는다.
객체가 아니라 해제할 필요 없다.
내부적으로 GPU 메모리, CPU 메모리 Pair로 구성되어 있다.
D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_GPU_DESCRIPTOR_HANDLE로 표현되며 사실상 포인터

Descriptor Heap(서술자 힙)
Descriptor로 사용할 선형 Memory 배열
ID3D12DescriptorHeap로 구현되어 있다.(COM객체)
CPU 메모리, GPU측 메모리 Pair로 구성되어 있다.
CBV, SRV, URV는 이 Descriptor Heap의 CPU/GPU 메모리에 생성(write)된다.
Descriptor Heap의 CPU측 메모리에 write Shader에선 GPU메모리에서 read한다.

Root Signature - ID3D12RootSignature
어떤 리소스가 어떻게 Pipeline에 bind 될지를 정의
Resource binding 설정을 기술한 일종의 템플릿

Command List & Command Queue
비동기 렌더링을 위한 디자인
Graphics Command를 Command List에 Recording해서 Command Queue에 전송. (이 시점에 GPU Queue로 전송)
1개의 Command List만으로도 처리는 가능 -> 성능 안나옴
멀티스레드로 여러 개의 Command List를 동시에 Recording하고 각각의 스레드가 독립저긍로 Execute하는 것을 권장.

Command Queue - 완료 체크
ID3D12Fence 객체를 사용해서 작업이 완료되었는지를 표시한다.
ID3D12CommandQueue::Signal(fence, completed value)를 호출, 전송한 작업이 완료되면 ID3D12Fence객체의 Completed value가 업데이트된다.
ID3D12Fence::GetCompletedValue()로 작업이 완료되었는지를 체크.

Pipeline State - ID3D12PipelineState
Blend State, Depth State, Render Target format, Shader.. 등 이 모든 상태들을 하나로 묶어서 처리
다차원 배열을 통해 해결하거나 MS에서 권장하는 방법은 PipelineState Cache(해시 테이블 또는 해시맵)를 만들어서 사용하라는 것