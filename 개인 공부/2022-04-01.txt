Game Framework
Message Loop를 반복

한 프레임을 만들기 위하여 기본적인 일
1. 사용자 인풋 처리
2. Animate Objects(update)
3. Render

모델이 특정 축을 바라보도록 회전시키는 방법
1. 회전 축과 회전 각도를 알아야 함.
2. 모델이 바라보고자 하는 방향(vDirection)과 모델의 UP을 외적하여 회전 축을 구함.
3. 모델이 바라보고자 하는 방향(vDirection)과 모델의 UP을 내적하고 그의 acos 값을 통해 각도를 구함
4. 회전 축으로 각도 만큼 회전함.

게임 오브젝트를 이루는 것
1. 메쉬의 포인터를 갖는다. 포인터를 이용하는 이유는 같은 메쉬를 공유하기 위하여.
2. 월드 좌표 행렬.

그러나 탱크 같은 경우를 생각해 보면, 탱크의 특정 부분만 회전해야 하는 경우가 생긴다. 사람 역시 마찬가지.
따라서 트리 자료구조를 이용하여 오브젝트를 나타낸다.
1. 여러 메쉬를 저장하는 메쉬의 포인터의 포인터를 갖는다. 또한 메쉬의 개수를 저장한다.(m_nMeshes)
2. 이진 트리 구조로 하위에 *pChild, *pSibling를 갖는다. pChild는 자식의 포인터, pSibling은 동생의 포인터이다.
3. Transform 행렬. 여기서는 World 행렬이라고 부르지 않는다. 루트 노드는 World 행렬의 특성을 갖지만 그 외의 노드는 부모가 움직이면 따라 움직이는 모델 좌표계의 특성을 갖기 때문.

이러한 구조로 구성된 오브젝트를 Render 할 때, Render 함수는 부모의 변환 행렬을 넘겨받도록 구성한다.
1. 부모로부터의 변환 행렬과, 2. 자신의 행렬을 곱하여 나온 행렬을 최종적으로 메쉬를 그리는데 사용한다.
오브젝트가 가지고 있는 자식에게는 이렇게 곱하여 나온 행렬을 전달하여 Render 해주고
오브젝트가 가지고 있는 형제에게는 부모로부터 받은 변환 행렬을 그대로 넘겨 Render 해준다.
부모가 없다면 루트 노드이기 때문에 자신의 행렬로 그냥 그리면 된다. 