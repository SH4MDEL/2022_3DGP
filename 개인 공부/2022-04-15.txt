명령 할당자(Command Allocator)

명령 리스트(Command List)
- GPU가 실행할 명령들의 순서화된 집합을 나타냄(순서대로 실행)
  생성되면 열린 상태(명령을 추가할 수 있는 상태)
  닫으면 닫힌 상태(더이상 명령을 추가할 수 없는상태)
  멤버 함수를 호출하는 것은 명령 리스트에 명령을 추가하는 것
- 명령 할당자의 유형과 명령 리스트의 유형은 일치해야 함.

Graphics Command List
그래픽 작업을 위한 명령 리스트
직접 사용하지 않고 상속된 클래스 사용

ID3D12GraphicsCommandList
모든 명령의 호출은 즉각적으로 실행되는것이 아니다. 지연의 가능성 있다.


직접 명령 리스트(Direct Command List)
GPU가 바로 실행할 수 있는 명령 버퍼

번들 명령 리스트(Bundle Command List)
직접 명령 리스트를 통하여 실행할 수 있는 명령 버퍼
기본적으로 반복적으로 실행하기 위한 명령들의 리스트

명령 리스트의 실행(Execute Command Lists)
- 위 함수를 통해 실행할 명령 리스트를 명령 큐에 추가하면 GPU가 순서대로 실행함.
  명령 큐에 추가된 명령 리스트는 순차적으로 실행됨.
- 여러 개를 한번에 처리할 수 있도록 일련의 명령을 큐에 추가할 수 있음(배치 처리)


GPU/CPU 동기화
- 병렬적으로 실행되기 위하여 동기화 필요
  기본적으로 CPU는 리소스를 생성(write)하고, GPU는 사용(read)함.
  병렬처리에서 공유되는 리소스에 대한 동기화 처리가 필요할 수 있음.
  어떤 프로세서가 리소스를 변경하고 다른 프로세서가 읽기를 할 때 발생.

ID3D12Fence 인터페이스
- CPU와 GPU의 동기화를 위하여 사용
- 내부적으로 long long 값을 하나 가지고 있고, CPU는 값의 변화가 있는지 검사
  GPU는 큐가 다 비었을 때 Fence 값을 1 늘림.
- CreateFence 함수를 통해 생성.
- 물론 기다리는 동안 CPU가 아무 일도 안 할수는 없으니 동기화 객체 사용.

Signal(UINT64 Value) : 지정한 값으로 펜스 값을 설정
Wait


셰이더 리소스
- 리소스는 렌더링 과정동안 GPU가 사용하는 데이터(비디오 메모리에 저장)임
  후면 버퍼, 깊이/스텐실 버퍼, 기하 데이터, 텍스처, 버퍼
- 텍스처, 버퍼
- 파이프라인
- 리소스 뷰(Resource View)
  리소스는 셰이더 파이프라인에 연결(바인딩)되어야 함
  리소스는 파이프라인에 직접 연결되지 않고 서술자(뷰)를 통하여 연결됨
  서술자는 하나의 리소스에 대한 정보를 포함하고 있는 객체(자료구조)임

  - 렌더 타겟 뷰(렌더 타겟이라는 리소스가 있고 이를 서술자로 만든 거다!)
  - 깊이 스텐실 뷰
  - 정점 버퍼 뷰
  - 인덱스 버퍼 뷰

CreateCommittedResource
- 커밋 리소스
  가상 메모리 공간과 물리적 메모리 공간을 모두 생성
- 위치 리소스(Placed Resource)
  힙의 어떤 영역에 대한 포인터
- 예약 리소스(Reserved Resource)
  자체적인 GPU 가상 주소 공간을 가짐

서술자(Descriptor)
- 리소스는 셰이더 파이프라인에 연결(바인딩)되어야 사용할 수 있음.
- 리소스는 파이프라인에 직접 연결되지 않고 서술자(뷰)를 통하여 연결됨
- 서솔자는 하나의 리소스에 대한 정보를 포함하고 있는 객체(자료구조)임
  GPU에게 리소스를 완전하게 설명(서술)하는 데이터
  파이프라인이 리소스에 대한 접근을 하기 위하여 서술자를 참조해야 함
- 서술자는 서술자 테이블(Descriptor Table)을 구성하도록 그룹화됨
  각 서술자 테이블은 하나의 유형의 리소스에 대한 정보를 저장함
- 서술자 테이블은 서술자 힙(Descriptor Heap)에 저장됨
- 서술자의 크기는 GPU 하드웨어에 따라 다름(32~64 바이트)
- 서술자 핸들(Descriptor Handle)
  서술자의 주소: 포인터와 유사

루트 시그니처(Root Signature)
5개의 셰이더에 리소스를 연결하기 위한 정보..