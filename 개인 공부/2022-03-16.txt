카메라 변환
- 카메라를 중심으로 게임 월드의 객체들의 위치와 방향을 변환

카메라 변환 행렬
- 카메라 월드 변환 행렬의 역행렬이다.
- D3DXMatrixInverse와 같은 역행렬 함수 사용은 권장하지 않는다.(느림)
- D3DXMatrixLookAtLH함수를 통해 Eye, At, Up을 전달하여 왼손 좌표계 상에서의 카메라 변환 행렬을 구할 수 있다.


원근 투영(Perspective Projection) 변환 행렬
원근 투영 변환이란 90도 FOV에서 그저 x와 y를 z로 나누는 연산
- 90도 FOV가 아닐 경우
- 모니터(화면)은 정사각형이 아니다. 따라서 정사각형인 투영 좌표계를 직사각형인 화면 좌표계 상으로 옮기게 되면 어색해진다.
- 그 비율만큼 줄여서 그려야 한다.

원근 투영 변환
- 원근 투영 나누기를 하기 전에 메쉬를 왜곡시킨다.
- 기본적으로 FOV를 90도로 가정하고, 더 넓어지거나 좁아졌을 때 메쉬에 대한 Scale 연산을 통해 화면에 표시하고 표시하지 않을 메쉬를 판단해 준다. 이 때 x, y에 대해 1/tan(a) 즉 cotan(a)를 곱해 준다.

XMMatrixPerspectiveFovLH
왼손 좌표계 상에서의 원근 투영 변환 행렬을 생성하여 반환(카메라 좌표계)
- fovy : y-축 방향의 FOV(라디안)

XMMatrixOrthographicLH
왼손 좌표계 상에서의 직교 투영 변환 행렬을 생성하여 반환(카메라 좌표계)
- w : 가로 크기
- h : 세로 크기
- zn : 근평면(Near View-plane)의 z-값
- zf : 원평면(Far View-plane)의 z-값


깊이값(Depth Values)
Z-fighting : 깊이가 1에 가까운 Depth의 차이가 거의 없어서 실수 표현 문제로 인해 화면에 표시할 점이 계속해서 바뀌는 현상


피킹(Picking)
화면 좌표 -> 화면 역변환 -> 투영 역변환 -> 카메라 좌표



어떤 좌표계를 사용할 것인가
- 어떤 알고리즘이 있는데, 이 알고리즘을 어떤 좌표계를 통해 나타 낼 것인가
- 카메라 좌표계를 사용한다면 모든 정보는 카메라 좌표계로 표현되어야 한다.
  즉 모델 좌표 -> 월드 좌표 -> 카메라 좌표
- 월드 좌표계를 사용한다면 모든 정보는 월드 좌표계로 표현되어야 한다.

전체적으로 어떤 변환을 하는 것이 효율적인가? 원하는 정보가 어디에 있는가?


충돌 검사를 한다고 하면 메쉬는 *pMesh와 Matrix w를 가지고 있다.
