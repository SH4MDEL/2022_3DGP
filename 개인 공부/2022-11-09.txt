수요일 한시간씩 수업 더함.

테셀레이션
테셀레이터라고 하는 고정 파이프라인 단계와
헐 셰이더, 도메인 셰이더로 이루어져 있음.

기하 셰이더에서 할 수 없는 일을 할 수 있도록 제공됨.

테셀레이션 단계
도메인(사각형, 삼각형, 선분)을 작고 많은 프리미티브로 분할
모델은 low polygon 형태로 주고 굴곡 자체는 GPU에서 만든다.
LOD Group을 사용했을 때 요구되는 많은 메모리와 대역폭(1억 개에 해당하는 모델이 CPU에서 GPU로 넘어감)을 절약할 수 있다.
대개 테셀레이션을 쓰면 기하 셰이더는 쓰지 않는다.

이전까지 삼각형을 프리미티브라고 불렀는데, 테셀레이션에서는 프리미티브라는 표현 대신 패치(fatch)라는 용어를 사용한다.(삼각형 패치, 사각형 패치)
정점(vertex) 대신 제어점(control point)라고 한다.
패치와 프리미티브의 차이
프리미티브: 세 개의 점이 같은 평면에 존재한다고 생각한다. 따라서 지금까지 우리가 다룬 모든 모델은 같은 평면에 존재했다. 평면 위에 있는 점들의 집합.
패치: 사각형을 그릴 때 네 개의 점이 같은 평면에 존재하지 않아도 된다. 즉 곡면 위에 있는 점들의 집합. 곡면을 그리기 위해선 점 두개로는 안 된다. 적어도 세개 이상이 필요. 

헐 셰이더(Hull Shader)
테셀레이션 단계의 첫 번째 단계
입력 패치 하나마다 한 번씩 호출된다. 패치가 입력되어야 하므로 입력 조립기에 프리미티브 대신 패치를 넘겨야 한다. 이는 입력 조립 단계에서 프리미티브 토폴로지에 정해준다.
헐 셰이더는 두 가지 함수(셰이더 함수, 패치 상수 함수)로 이뤄지는데, 각각 패치 제어점과 패치 상수 데이터를 생성하기 위한 함수이다.
입력 제어점으로부터 출력 제어점과 패치 상수를 생성한다.

- 패치 상수를 정의하는 함수
INPUT_PATCH를 입력받아 구조체를 출력하는데, 이 구조체에는 반드시 SV_TessFactor와 SV_InsideTessFactor라고 하는 시스템 밸류 시맨틱이 포함되어야 한다.

- 입력 제어점을 출력 제어점으로 바꾸는 함수
함수 앞에 여러 가지 키워드들을 써서 Hull Shader를 정의하게 된다.
패치 상수 함수의 출력값과 uint 하나를 입력값으로 받는다.
domain(): 하나의 패치를 어떤 도형으로 판단했는지 논리적인 패치의 형태를 정해준다. "quad", "triangle" 등
partitioning(): 테셀레이터를 정의하는 키워드. 분할 방법(테셀레이션 인자의 사용 방법)
outputtopology(): 테셀레이션이 진행되면 여러 곡면이 추가로 생성되므로, 작은 프리미티브를 레스터라이저가 받게 된다. 입력 조립기에는 패치가 입력되므로, 레스터라이저에서 이를 어떻게 해석할지를 정의한다. "triangle_cw", "triangle_ccw" 등
outputcontrolpoints(): 헐 셰이더가 출력할 제어점 개수
patchconstantfunc(): 패치 상수 함수의 이름
테셀레이터
고정 파이프라인 단계
테셀레이터 자체를 Set 하는 과정은 전혀 필요하지 않다.(헐 셰이더의 설정을 그대로 사용)

도메인 셰이더(Domain Shader)
헐 셰이더의 출력 제어점과 테셀레이터 단계 출력 텍스처 좌표(사실상 uv좌표)를 입력값으로 받는다.
출력 패치에서 분할된 하나의 점의 정점 위치를 계산한다.


